name: Python CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB_TEST }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7.0.5-alpine
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Check out repository 
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10' 

    # - name: Install Docker Compose
    #   run: sudo apt-get install docker-compose -y

    # - name: Run Docker Compose
    #   run: |
    #     cd .github/test/
    #     docker-compose up -d
 
    - name: Install dependencies
      run: |
        cd src
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create .env file
      run: |
        cd src
        echo "DB__URL=${{ secrets.DB__URL }}" >> .env
        echo "DB__HOST=${{ secrets.DB__HOST }}" >> .env
        echo "DB__PORT=${{ secrets.DB__PORT }}" >> .env
        echo "DB__NAME=${{ secrets.DB__NAME }}" >> .env
        echo "DB__USER=${{ secrets.DB__USER }}" >> .env
        echo "DB__PASSWORD=${{ secrets.DB__PASSWORD }}" >> .env
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
        echo "DB_TEST__HOST=${{ secrets.DB_TEST__HOST }}" >> .env
        echo "DB_TEST__PORT=${{ secrets.DB_TEST__PORT }}" >> .env
        echo "DB_TEST__NAME=${{ secrets.DB_TEST__NAME }}" >> .env
        echo "DB_TEST__USER=${{ secrets.DB_TEST__USER }}" >> .env
        echo "DB_TEST__PASSWORD=${{ secrets.DB_TEST__PASSWORD }}" >> .env
        echo "DB_TEST__URL=${{ secrets.DB_TEST__URL }}" >> .env
        echo "AWS__BUCKET_NAME=${{ secrets.AWS__BUCKET_NAME }}" >> .env
        echo "REDIS__HOST=${{ secrets.REDIS__HOST }}" >> .env
        echo "REDIS__PORT=${{ secrets.REDIS__PORT }}" >> .env
        echo "REDIS__FIRST_DB=${{ secrets.REDIS__FIRST_DB }}" >> .env
        echo "REDIS__SECOND_DB=${{ secrets.REDIS__SECOND_DB }}" >> .env
        echo "SMTP__USER=${{ secrets.SMTP__USER }}" >> .env
        echo "SMTP__PASSWORD=${{ secrets.SMTP__PASSWORD }}" >> .env
        echo "SMTP__HOST=${{ secrets.SMTP__HOST }}" >> .env
        echo "SMTP__PORT=${{ secrets.SMTP__PORT }}" >> .env

    - name: Create JWT private and public key file
      env:
        JWT_PRIVATE_KEY: ${{ secrets.JWT_PRIVATE_KEY }}
        JWT_PUBLIC_KEY: ${{ secrets.JWT_PUBLIC_KEY }}
      run: |
        cd src
        mkdir -p certs
        echo "$JWT_PRIVATE_KEY" > certs/jwt-private.pem
        echo "$JWT_PUBLIC_KEY" > certs/jwt-public.pem

    - name: run celery worker
      run: |
        cd src
        celery -A music.tasks.celery_app worker --loglevel=info &

    - name: Run tests
      env:
        DATABASE_URL: postgresql+asyncpg://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/${{ secrets.POSTGRES_DB_TEST }}
      run: |
        cd src
        pytest -s -v

    # - name: Stop Docker Compose
    #   run: docker-compose down
